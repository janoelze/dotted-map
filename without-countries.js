!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("proj4"),require("@turf/boolean-point-in-polygon")):"function"==typeof define&&define.amd?define(["proj4","@turf/boolean-point-in-polygon"],t):"object"==typeof exports?exports["dotted-map"]=t(require("proj4"),require("@turf/boolean-point-in-polygon")):e["dotted-map"]=t(e.proj4,e["@turf/boolean-point-in-polygon"])}(this,(function(e,t){return(()=>{"use strict";var o={620:e=>{e.exports=t},25:t=>{t.exports=e}},r={};function n(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={exports:{}};return o[e](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{n.r(i),n.d(i,{default:()=>a});var e=n(25),t=n.n(e),o=n(620),r=n.n(o);const a=function({map:e,avoidOuterPins:o=!1}){const{points:n,X_MIN:i,Y_MAX:a,X_RANGE:l,Y_RANGE:s,region:p,grid:u,width:d,height:c,ystep:f}=e;return{addPin({lat:e,lng:t,data:o,svgOptions:r}){const i={...this.getPin({lat:e,lng:t}),data:o,svgOptions:r};return n[[i.x,i.y].join(";")]=i,i},getPin({lat:e,lng:n}){const[p,g]=t()(t().defs("GOOGLE"),[n,e]);if(o){const e=t()(t().defs("GOOGLE"),t().defs("WGS84"),[p,g]);if(!r()(e,poly))return}let[y,v]=[d*(p-i)/l,c*(a-g)/s];const b=Math.round(v/f);b%2==0&&"diagonal"===u&&(y-=.5);const h=Math.round(y);let[x,j]=[h,Math.round(b)*f];b%2==0&&"diagonal"===u&&(x+=.5);const[O,$]=t()(t().defs("GOOGLE"),t().defs("WGS84"),[x*l/d+i,a-j*s/c]);return{x,y:j,lat:$,lng:O}},getPoints:()=>Object.values(n),getSVG:({shape:e="circle",color:t="current",backgroundColor:o="transparent",radius:r=.5})=>`<svg viewBox="0 0 ${d} ${c}" xmlns="http://www.w3.org/2000/svg" style="background-color: ${o}">\n        ${Object.values(n).map((({x:o,y:n,svgOptions:i={}})=>{const a=i.radius||r;if("circle"===e)return`<circle cx="${o}" cy="${n}" r="${a}" fill="${i.color||t}" />`;if("square"===e)return`<rect x="${o-a}" y="${n-a}" width="${2*a}" height="${2*a}" fill="${i.color||t}" />`;if("hexagon"===e){const e=Math.sqrt(3)*a;return`<polyline points="${[[o+e,n-a],[o+e,n+a],[o,n+2*a],[o-e,n+a],[o-e,n-a],[o,n-2*a]].map((e=>e.join(","))).join(" ")}" fill="${i.color||t}" />`}})).join("\n")}\n      </svg>`,image:{region:p,width:d,height:c}}}})(),i})()}));